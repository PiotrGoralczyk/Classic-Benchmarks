// The Computer Language Benchmarks Game
// http://shootout.alioth.debian.org/
//
// contributed by Antoine Pitrou
// modified by Dominique Wahli
// modified by Heinrich Acker

import Builtins, Maths, Strings, Sys

class Tree:
    func init(self, item, left, right):
        self.item := item
        self.left := left
        self.right := right

func make_tree(item, depth):
    if depth <= 0:
        return item
    item2 := item + item
    depth -= 1
    return Tree.new(item, make_tree(item2 - 1, depth), make_tree(item2, depth))

func check_tree(tree):
    if not Tree.instantiated(tree):
        return tree
    return tree.item + check_tree(tree.left) - check_tree(tree.right)

func main():
    min_depth := 4
    max_depth := Maths::max(min_depth + 2, Builtins::Int.new(Sys::argv[0]))
    stretch_depth := max_depth + 1

    Sys::println(Strings::format("stretch tree of depth %d\t check: %d", stretch_depth, check_tree(make_tree(0, stretch_depth))))

    long_lived_tree := make_tree(0, max_depth)

    iterations := 2.pow(max_depth)
    depth := min_depth
    while depth < stretch_depth:
        check := 0
        i := 1
        while i < iterations + 1:
            check += check_tree(make_tree(i, depth)) + check_tree(make_tree(-i, depth))
            i += 1

        Sys::println(Strings::format("%d\t trees of depth %d\t check: %d", iterations * 2, depth, check))
        iterations := iterations.idiv(4)
        depth += 2

    Sys::println(Strings::format("long lived tree of depth %d\t check: %d", max_depth, check_tree(long_lived_tree)))
